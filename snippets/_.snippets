# React: class component
snippet rcc
	import React, { Component } from 'react';
	import PropTypes from 'prop-types';

	/**
	 * Component $1
	 */
	export default class ${1:ComponentName} extends Component {
		constructor(props) {
				super(props);
		}

		render() {
			return (
				${2:<div></div>}
			);
		}
	}

	$1.propTypes = {
	};

# React: functional component
snippet rfc
	import React from 'react';
	import PropTypes from 'prop-types';

	const ${1:ComponentName} = ({}) => {
		return (
			${2:<div></div>}
		);
	}

	$1.displayName = '$1';

	$1.propTypes = {
	};

	/**
	 * Functional component $1
	 */
	export default $1;

# React: class component with Redux
snippet rcr
	import React, { Component } from 'react';
	import { connect } from 'react-redux';
	import PropTypes from 'prop-types';

	const mapStateToProps = state => ({
		${3:stateProp}: state.$3,
	});

	const mapDispatchToProps = dispatch => ({
		${4:stateAction}: () => dispatch({ type: 'action' }),
	});

	/**
	 * $1 Component for handling React lifecycle
	 */
	export class ${1:ComponentName}Component extends Component {
		constructor(props) {
			super(props);
		}

		render() {
			return (
				${2:<div></div>}
			);
		}
	}
	
	$1.propTypes = {
	  $3: PropTypes.string.isRequired,
		$4: PropTypes.func.isRequired,
	};

	/**
	 * Connected version of $1
	 */
	export default connect(mapStateToProps, mapDispatchToProps)($1);

# React: componentDidMount() {…}
snippet cdm
	componentDidMount() {
		${0}
	}

# React: componentDidUpdate(pp, ps) {…}
snippet cdu
	componentDidUpdate(prevProps, prevState) {
		${0}
	}

# React: componentWillReceiveProps(np) {…}
snippet cwr
	componentWillReceiveProps(nextProps) {
		${0}
	}

# React: componentWillUnmount() {…}
snippet cwun
	componentWillUnmount() {
		${0}
	}

# React: setState()
snippet rss
	this.setState({ ${1}: ${2} });

# React: PropTypes arrayOf
snippet pta
	${1}: PropTypes.arrayOf(${3})${2:.isRequired},

# React: PropTypes bool
snippet ptb
	${1}: PropTypes.bool${2:.isRequired},

# React: PropTypes func
snippet ptf
	${1}: PropTypes.func${2:.isRequired},

# React: PropTypes string
snippet pts
	${1}: PropTypes.string${2:.isRequired},

# React: PropTypes string
snippet ptn
	${1}: PropTypes.number${2:.isRequired},

# React: PropTypes shape
snippet pto
	${1}: PropTypes.shape({
		${3},
	})${2:.isRequired},

# React: PropTypes oneOf
snippet ptof
	${1}: PropTypes.oneOf(['${3}:'])${2:.isRequired},

# React: PropTypes oneOfType
snippet ptoft
	${1}: PropTypes.oneOfType([${3:}])${2:.isRequired},

# React Redux: reducer
snippet rrr
	/**
	 * ${4:}'s reducer.
	 * @param {String} state  Existing $4's state
	 * @param {Object} action Action dispatched
	 * @return {Object} New state
	 */
	export default (state = ${1:initialState}, action) => {
		switch (action.type) {
			case ${2:actionName}:
				return ${3:};
			default:
				return state;
		}
	};
