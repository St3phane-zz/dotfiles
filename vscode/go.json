{
  "Golang Test": {
    "prefix": "gt",
    "body": [
      "func Test_${2:FuncName}(t *testing.T) {",
      "\tvar cases = []struct {",
      "\t\tintention string",
      "\t\tinput     string",
      "\t\twant      bool",
      "\t}{",
      "\t\t{",
      "\t\t\t`should work with given params`,",
      "\t\t\t`test`,",
      "\t\t\ttrue,",
      "\t\t},",
      "\t}",
      "",
      "\tfor _, testCase := range cases {",
      "\t\tif result := ${2:FuncName}(testCase.input); result != testCase.want {",
      "\t\t\tt.Errorf(\"%s\\n${2:FuncName}(%+v) = %+v, want %+v\", testCase.intention, testCase.input, result, testCase.want)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Golang Test"
  },
  "Golang Test w/ Error": {
    "prefix": "gte",
    "body": [
      "func Test_${1:FuncName}(t *testing.T) {",
      "\tvar cases = []struct {",
      "\t\tintention string",
      "\t\tinput   string",
      "\t\twant    bool",
      "\t\twantErr error",
      "\t}{",
      "\t\t{",
      "\t\t\t`should work with given params`,",
      "\t\t\t`test`,",
      "\t\t\tfalse,",
      "\t\t\tfmt.Errorf(`Error while testing`),",
      "\t\t},",
      "\t}",
      "",
      "\tvar failed bool",
      "",
      "\tfor _, testCase := range cases {",
      "\t\tresult, err := ${1:FuncName}(testCase.input)",
      "",
      "\t\tfailed = false",
      "",
      "\t\tif err == nil && testCase.wantErr != nil {",
      "\t\t\tfailed = true",
      "\t\t} else if err != nil && testCase.wantErr == nil {",
      "\t\t\tfailed = true",
      "\t\t} else if err != nil && err.Error() != testCase.wantErr.Error() {",
      "\t\t\tfailed = true",
      "\t\t} else if result != testCase.want {",
      "\t\t\tfailed = true",
      "\t\t}",
      "",
      "\t\tif failed {",
      "\t\t\tt.Errorf(\"%s\\n${1:FuncName}(%+v) = (%+v, %+v), want (%+v, %+v)\", testCase.intention, testCase.input, result, err, testCase.want, testCase.wantErr)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Golang test w/ Error"
  },
  "Golang Test w/ HTTP": {
    "prefix": "gth",
    "body": [
      "func Test_${1:FuncName}(t *testing.T) {",
      "\tvar cases = []struct {",
      "\t\tintention string",
      "\t\trequest    *http.Request",
      "\t\twant       string",
      "\t\twantStatus int",
      "\t}{",
      "\t\t{",
      "\t\t\t`should work with given params`,",
      "\t\t\thttptest.NewRequest(http.MethodGet, `/`, nil),",
      "\t\t\t``,",
      "\t\t\thttp.StatusOK,",
      "\t\t},",
      "\t}",
      "",
      "\tfor _, testCase := range cases {",
      "\t\twriter := httptest.NewRecorder()",
      "",
      "\t\t${1:FuncName}(writer, testCase.request)",
      "",
      "\t\tif result := writer.Code; result != testCase.wantStatus {",
      "\t\t\tt.Errorf(\"%v\\n${1:FuncName}(%+v) = %+v, want status %+v\", testCase.intention, testCase.request, result, testCase.wantStatus)",
      "\t\t}",
      "",
      "\t\tif result, _ := httputils.ReadBody(writer.Result().Body); string(result) != testCase.want {",
      "\t\t\tt.Errorf(\"%s\\n${1:FuncName}(%+v) = %+v, want %+v\", testCase.intention, testCase.request, string(result), testCase.want)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Golang test w/ HTTP"
  }
}
