{
  "Golang Test": {
    "prefix": "gt",
    "body": [
      "func Test${2:FuncName}(t *testing.T) {",
      "\tvar cases = []struct {",
      "\t\tinput string",
      "\t\twant  bool",
      "\t}{",
      "\t\t{",
      "\t\t`test`,",
      "\t\ttrue,",
      "\t\t},",
      "\t}",
      "",
      "\tfor _, testCase := range cases {",
      "\t\tif result := ${2:FuncName}(testCase.input); result != testCase.want {",
      "\t\t\tt.Errorf(`${2:FuncName}(%v) = %v, want %v`, testCase.input, result, testCase.want)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Golang Test"
  },
  "Golang Test w/ Error": {
    "prefix": "gte",
    "body": [
      "func Test${1:FuncName}(t *testing.T) {",
      "\tvar cases = []struct {",
      "\t\tinput   string",
      "\t\twant    bool",
      "\t\twantErr error",
      "\t}{",
      "\t\t{",
      "\t\t\t`test`,",
      "\t\t\tfalse,",
      "\t\t\tfmt.Errorf(`Error while testing`),",
      "\t\t},",
      "\t}",
      "",
      "\tvar failed bool",
      "",
      "\tfor _, testCase := range cases {",
      "\t\tresult, err := ${1:FuncName}(testCase.input)",
      "",
      "\t\tfailed = false",
      "",
      "\t\tif err == nil && testCase.wantErr != nil {",
      "\t\t\tfailed = true",
      "\t\t} else if err != nil && testCase.wantErr == nil {",
      "\t\t\tfailed = true",
      "\t\t} else if err != nil && err.Error() != testCase.wantErr.Error() {",
      "\t\t\tfailed = true",
      "\t\t} else if result != testCase.want {",
      "\t\t\tfailed = true",
      "\t\t}",
      "",
      "\t\tif failed {",
      "\t\t\tt.Errorf(`${1:FuncName}(%v) = (%v, %v), want (%v, %v)`, testCase.input, result, err, testCase.want, testCase.wantErr)",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Golang test w/ Error"
  }
}
