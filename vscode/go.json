{
	"Golang Test": {
		"prefix": "gt",
		"body": [
			"func Test${2:FuncName}(t *testing.T) {",
			"\tvar cases = []struct {",
			"\t\tinput string",
			"\t\twant  bool",
			"\t}{",
			"\t\t{",
			"\t\t`test`,",
			"\t\ttrue,",
			"\t\t},",
			"\t}",
			"\tfor _, case := range cases {",
			"\t\tif result := ${2:FuncName}(case.input); result != case.want {",
			"\t\t\tt.Errorf(`${2:FuncName}(%v) = %v, want %v`, case.input, result, case.want)",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Golang Test"
	},
	"Golang Test w/ Error": {
		"prefix": "gte",
		"body": [
			"func Test${1:FuncName}(t *testing.T) {",
			"\tvar tests = []struct {",
			"\t\tinput   string",
			"\t\twant    bool",
			"\t\twantErr error",
			"\t}{",
			"\t\t{",
			"\t\t`test`,",
			"\t\tfalse,",
			"\t\tfmt.Errorf(`Error while testing`),",
			"\t\t},",
			"\t}",
			"\tvar failed bool",
			"\tfor _, test := range tests {",
			"\t\tresult, err := ${1:FuncName}(test.input)",
			"\t\tfailed = false",
			"\t\tif err == nil && test.wantErr != nil {",
			"\t\tfailed = true",
			"\t\t} else if err != nil && test.wantErr == nil {",
			"\t\tfailed = true",
			"\t\t} else if err != nil && err.Error() != test.wantErr.Error() {",
			"\t\tfailed = true",
			"\t\t} else if result != test.want {",
			"\t\tfailed = true",
			"\t\t}",
			"\t\tif failed {",
			"\t\tt.Errorf(`${1:FuncName}(%v) = (%v, %v), want (%v, %v)`, test.input, result, err, test.want, test.wantErr)",
			"\t\t}",
			"\t}",
			"\t}"
		],
		"description": "Golang test w/ Error"
	}
}
