{
  "React Class Component": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "/**",
      " * ${1:ComponentName} Component.",
      " */",
      "export default class ${1:ComponentName} extends Component {",
      "\t/**",
      "\t * Creates an instance of ${1:ComponentName}.",
      "\t * @param {Object} props Component props",
      "\t */",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t}",
      "",
      "\t/**",
      "\t * React lifecycle.",
      "\t */",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t${2}",
      "\t\t);",
      "\t}",
      "}",
      "",
      "${1:ComponentName}.propTypes = {",
      "};"
    ],
    "description": "React Class Component"
  },
  "React Redux Component": {
    "prefix": "rrc",
    "body": [
      "import React, { Component } from 'react';",
      "import { connect } from 'react-redux';",
      "import PropTypes from 'prop-types';",
      "",
      "/**",
      " * Select props from Redux state.",
      " * @param {Object} state Current state",
      " */",
      "const mapStateToProps = state => ({",
      "\t${3:stateProp}: state.${3:stateProp},",
      "});",
      "",
      "/**",
      " * Provide dispatch functions in props.",
      " * @param {Function} dispatch Redux dispatch function",
      " */",
      "const mapDispatchToProps = dispatch => ({",
      "\t${4:stateAction}: () => dispatch({ type: 'action' }),",
      "});",
      "",
      "/**",
      " * ${1:ComponentName} Component.",
      " */",
      "export class ${1:ComponentName}Component extends Component {",
      "\t/**",
      "\t * Creates an instance of ${1:ComponentName}Component.",
      "\t * @param {Object} props Component props",
      "\t */",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t}",
      "",
      "\t/**",
      "\t * React lifecycle.",
      "\t */",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t${2}",
      "\t\t);",
      "\t}",
      "}",
      "",
      "${1:ComponentName}Component.propTypes = {",
      "\t${3:stateProp}: PropTypes.string,",
      "\t${4:stateAction}: PropTypes.func,",
      "};",
      "",
      "/**",
      " * ${1:ComponentName}Component connected.",
      " */",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:ComponentName}Component);"
    ],
    "description": "React Class Component with Redux"
  },
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const ${1:ComponentName} = ({}) => {",
      "\treturn (",
      "\t\t${2}",
      "\t);",
      "}",
      "",
      "${1:ComponentName}.displayName = '${1:ComponentName}';",
      "",
      "${1:ComponentName}.propTypes = {",
      "};",
      "",
      "/**",
      " * ${1:ComponentName} Functional Component.",
      " */",
      "export default ${1:ComponentName};"
    ],
    "description": "React Functional Component"
  },
  "Redux reducer": {
    "prefix": "rdr",
    "body": [
      "/**",
      " * ${3:ReducerName}'s reducer.",
      " * @param {String} state  Existing ${3:ReducerName}'s state",
      " * @param {Object} action Action dispatched",
      " * @return {Object} New state",
      " */",
      "export default (state = ${1:defaultState}, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase ${2:actionName}:",
      "\t\t\treturn ${4};",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};"
    ],
    "description": "Redux reducer"
  },
  "Redux Ava Test": {
    "prefix": "rdr",
    "body": [
      "import test from 'ava';",
      "import reducer, { initialState } from './${1:ReducerName}';",
      "",
      "test('should return initial state', (t) => {",
      "  t.deepEqual(reducer(undefined, { type: '' }), initialState);",
      "});",
    ],
    "description": "Redux reducer"
  },
  "Redux Mocha Test": {
    "prefix": "rdr",
    "body": [
      "import expect from 'expect';",
      "import reducer, { initialState } from './${1:ReducerName}';",
      "",
      "describe('${1:ReducerName} reducer', () => {",
      "  it('should return initial state', () => {",
      "    expect(reducer(undefined, { type: '' })).to.deep.equal(initialState);",
      "  });",
      "});",
    ],
    "description": "Redux reducer"
  },
  "React Ava Test": {
    "prefix": "rat",
    "body": [
      "import React from 'react';",
      "import test from 'ava';",
      "import { shallow } from 'enzyme';",
      "import ${1:ComponentName} from './';",
      "",
      "function defaultProps() {",
      "  return {};",
      "}",
      "",
      "test('should always render as a ${2:Type}', (t) => {",
      "  const props = defaultProps();",
      "  const wrapper = shallow(<${1:ComponentName} {...props} />);",
      "  t.is(wrapper.type(), '${2:Type}');",
      "});"
    ],
    "description": "Redux Ava Test"
  },
  "React Mocha Test": {
    "prefix": "rmt",
    "body": [
      "import React from 'react';",
      "import expect from 'expect';",
      "import { shallow } from 'enzyme';",
      "import ${1:ComponentName} from './';",
      "",
      "function defaultProps() {",
      "  return {};",
      "}",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  it('should always render as a ${2:Type}', () => {",
      "    const props = defaultProps();",
      "    const wrapper = shallow(<${1:ComponentName} {...props} />);",
      "    expect(wrapper.type()).to.equal('${2:Type}');",
      "  });",
      "});"
    ],
    "description": "Redux Mocha Test"
  }
}