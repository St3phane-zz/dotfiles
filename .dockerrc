#!/bin/bash

function docker-mounts() {
  docker inspect --format='{{range .Mounts}}{{if ne .Driver "local"}}{{.Source}} = {{.Destination}}|{{end}}{{end}}' --type=container ${1} | tr "|" "\n"
}

function docker-envs() {
  docker inspect --format='{{range $p := .Config.Env}}{{$p}}|{{end}}' --type=container ${1} | tr "|" "\n"
}

function docker-links() {
  docker inspect --format='{{range $p := .HostConfig.Links}}{{$p}}|{{end}}' --type=container ${1} | tr "|" "\n"
}

function docker-ports() {
  docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}}{{$p}} -> {{(index $conf 0).HostPort}}|{{end}}' --type=container ${1} | tr "|" "\n"
}

function docker-ips() {
  docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' --type=container ${1}
}

function nobody_nogroup_write() {
  sudo chmod -R g+w ${1} && sudo chown -R 65534:65533 ${1}
}

function docker-compose-deploy() {
  PROJECT_NAME=${1}
  readVariableIfRequired "PROJECT_NAME"

  DOMAIN=${2}
  readVariableIfRequired "DOMAIN"
  
  export DOMAIN=${DOMAIN}

  docker-compose -p ${PROJECT_NAME} pull
  docker-compose -p ${PROJECT_NAME} stop
  docker-compose -p ${PROJECT_NAME} rm -f -v
  docker-compose -p ${PROJECT_NAME} up -d --force-recreate
  
  docker rmi `docker images --filter dangling=true -q 2>/dev/null` 2>/dev/null
}

function docker-compose-hot-deploy() {
  PROJECT_NAME=${1}
  readVariableIfRequired "PROJECT_NAME"

  DOMAIN=${2}
  readVariableIfRequired "DOMAIN"
  export DOMAIN=${DOMAIN}

  services=`docker-compose -p ${PROJECT_NAME} ps | awk '{if (NR > 2) {print $1}}'`

  docker-compose -p ${PROJECT_NAME} pull
  matchPattern=${PROJECT_NAME}'_(.*?)_[0-9]+'

  for service in ${services}; do
    if [[ ${service} =~ ${matchPattern} ]]; then
      docker-compose -p ${PROJECT_NAME} scale ${BASH_REMATCH[1]}=2
    fi
  done

  docker-compose -p ${PROJECT_NAME} up -d

  echo "Waiting 5 seconds to start..."
  sleep 5

  if [ ! -z "${services}" ]; then
    docker stop ${services}
    docker rm -f -v ${services}
  fi
  
  docker-clean
}

function docker-restart() {
  docker start `docker ps -a -q -f status=exited -f status=created 2>/dev/null` 2>/dev/null
}

function docker-clean-images() {
  imagesToClean=`docker images --filter dangling=true -q 2>/dev/null`

  if [ ! -z "${imagesToClean}" ]; then
    docker rmi ${imagesToClean} 
  fi
}

function docker-clean() {
  forceWord=force

  if [ "${#}" -eq 2 ] && [ "${2}" != "${forceWord}" ]; then
    echo Usage: dclean [name prefix] [?force]
    return
  fi

  if [ "${1}" == "${forceWord}" ] || [ "${2}" == "${forceWord}" ]; then
    exclude_containers=""
  else
    exclude_containers=`docker ps -a -q -f label=keep=true 2>/dev/null`
  fi

  if [ ! -z "${1}" ] && [ "${1}" != "${forceWord}" ]; then
    end_containers=`docker ps -a -q -f name=${1} 2>/dev/null`
  else
    end_containers=`docker ps -a -q -f status=exited -f status=created 2>/dev/null`
  fi

  if [ ! -z "${exclude_containers}" ]; then
    end_containers=`echo ${end_containers} | tr " " "\n" | grep -v "${exclude_containers}"`
  fi
  docker rm -vf ${end_containers} 2>/dev/null
  docker-clean-images
}

export DOCKER_CONTENT_TRUST=1
