#!/usr/bin/env bash

function git_info() {
  git rev-parse --is-inside-work-tree &>/dev/null || return
  branch=`git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||'`
  dirty=`git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo -e "*"`

  echo " ($branch$dirty)"
}

function git_prune() {
  git prune
  git branch --merged | egrep -v "(^\*|master)" | xargs git branch -d
}

function git_pull() {
  git_browse 'git pull'
}

function head_sync() {
  if [ "${#}" -ne 2 ]; then
    echo Usage: head_sync [REMOTE_SERVER] [REMOTE_PATH_FROM_HOME]
    return 1
  fi

  branch=`git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||'`
  ssh "${1}" "PS1=$ source ~/.bashrc && cd ~/${2}/ && git reset HEAD . && git clean -f && git checkout -- . && git fetch && git checkout ${branch} && git pull"
}

function git_sync() {
  if [ "${#}" -ne 2 ]; then
    echo Usage: git_sync [REMOTE_SERVER] [REMOTE_PATH_FROM_HOME]
    return 1
  fi

  RED='\033[0;31m'
  GREEN='\033[0;32m'
  BLUE='\033[0;34m'
  RESET='\033[0m'

  echo -e "${BLUE}Syncing files...${RESET}"

  ssh "${1}" "cd ~/${2}/ && git clean -f && git checkout -- ."

  IFS=$'\n'
  for gitFile in `git status --porcelain`; do

    case "${gitFile:0:1}" in
      "M" | "A" | "?")
        updatedFile="${gitFile:3}"
        rsync -a "${updatedFile}" "${1}:~/${2}/${updatedFile}"
        echo -e "${GREEN} + ${updatedFile}${RESET}"
        ;;

      "D")
        deletedFile="${gitFile:3}"
        ssh "${1}" "rm ~/${2}/${deletedFile}"
        echo -e "${RED} - ${deletedFile}${RESET}"
        ;;

      "R")
        originFile=`echo -n "${gitFile}" | awk '{print $2}'`
        destinationFile=`echo -n "${gitFile}" | awk '{print $4}'`

        ssh "${1}" "rm ~/${2}/${originFile}"
        echo -e "${RED} - ${originFile}${RESET}"

        rsync -a "${destinationFile}" "${1}:~/${2}/${destinationFile}"
        echo -e "${GREEN} + ${destinationFile}${RESET}"
        ;;

      *)
        echo -e "${BLUE} ¯\_(ツ)_/¯ Don't know how to handle ${gitFile}${RESET}"
    esac

  done

  echo -e "${BLUE}Done!${RESET}"
  echo
}

function watch_sync() {
  git_sync "${@}"

  fswatch -0 -o --exclude=.git/ . | while read -d "" event
  do
    git_sync "${@}"
  done
}

function git_browse() {
  currentWorkDir=`pwd`

  for dir in ${currentWorkDir}/*; do
    cd ${dir}
    if [ `git rev-parse --is-inside-work-tree 2>/dev/null | grep true | wc -l` -eq 1 ]; then
      echo ${dir} && sh -c "$@"
    fi
  done

  cd ${currentWorkDir}
}
